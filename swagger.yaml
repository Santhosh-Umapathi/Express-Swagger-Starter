openapi: 3.0.3

info:
  title: Social App
  description: Social App informations
  version: 1.0.0
  contact:
    name: Santhosh
    email: support@app-city.co

tags:
  - name: Facebook
    description: Facebook routes
    externalDocs:
      url: http://docs.my-api.com/pet-operations.html
  - name: Instagram
    description: Instagram routes
    externalDocs:
      url: http://docs.my-api.com/pet-operations.html
  - name: LinkedIn
    description: LinkedIn routes
    externalDocs:
      url: http://docs.my-api.com/pet-operations.html

servers:
  - url: http://localhost:5000/api/v1
    description: Local Development Environment

  - url: "{protocol}://api.express-swagger.com/api/{version}"
    description: Production Environment
    variables:
      version:
        default: v1
        enum:
          - v1
          - v2
      protocol:
        default: https
        enum:
          - http
          - https

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /facebook:
    get:
      tags:
        - Facebook
      summary: Get values of facebook user info.
      responses:
        "200":
          description: Success, returns the object
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  followers:
                    type: string
                  follows:
                    type: string

    post:
      tags:
        - Facebook
      summary: Inserts values of facebook user info.
      responses:
        "200":
          description: Success, returns the object
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  followers:
                    type: string
                  follows:
                    type: string

  /instagram:
    get:
      tags:
        - Instagram
      summary: Get values of instagram user info.
      responses:
        "200":
          description: Success, returns the object
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  followers:
                    type: string
                  follows:
                    type: string

    post:
      tags:
        - Instagram
      summary: Inserts values of instagram user info.
      responses:
        "200":
          description: Success, returns the object
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  followers:
                    type: string
                  follows:
                    type: string

  /linkedin:
    get:
      tags:
        - LinkedIn
      summary: Get values of linkedIn user info.
      responses:
        "200":
          description: Success, returns the object
          content:
            application/json:
              schema:
                type: object
                example:
                  { username: "test", followers: "test", follows:' test' }
                properties:
                  username:
                    type: string
                  followers:
                    type: string
                  follows:
                    type: string

    post:
      tags:
        - LinkedIn
      summary: Inserts values of linkedIn user info.
      responses:
        200:
          description: Success, returns the object
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  followers:
                    type: string
                  follows:
                    type: string

  /course:
    post:
      tags:
        - Course
      summary: Adds new course Courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number

      responses:
        200:
          description: Success, returns the array
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    price:
                      type: number

  /coursequery:
    get:
      tags:
        - Course
      summary: Get course info
      parameters:
        - name: device
          in: query
          required: true
          schema:
            type: string
            enum: [web, mobile]
            default: web

        - name: location
          in: query
          required: true
          schema:
            type: string
            enum: [italy, USA]
            default: USA

      responses:
        200:
          description: Success, returns the object
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    type: string
                  device:
                    type: string

  /courseupload:
    post:
      tags:
        - Course
      summary: Upload images
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                uploadFile:
                  type: string
                  format: binary

      responses:
        200:
          description: Success, returns the boolean
          content:
            application/json:
              schema:
                type: boolean

  /{token}:
    get:
      summary: Passing values in url
      parameters:
        - name: token
          default: test
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Returns the entered token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /array:
    get:
      tags:
        - Array
      summary: Array example.
      responses:
        "200":
          description: Success, returns the array
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                    followers:
                      type: string
                    follows:
                      type: string
